<!doctype html>
<html lang="en">
<head>
<title>WEbRTC</title>
<link rel ="stylesheet" type="text/css" href="style.css">
<script src = "/socket.io/socket.io.js"></script>
</head>
<body>	
    <div id ="cameraSelector">
			Video: <select id ="camera"></select>
            Audio: <select id ="mic"></select>
	</div>
<!--
		<video id="myVideoTag" autoplay></video>
        <video id="theirVideoTag" autoplay></video>
-->
		
 <div id="videoPage" class="mastHead" style="display: block;">
      <div class="video-page-holder video-page-holder-horizontal">
        <div class="left">
          <div class="video-wrap">
            <div class="main-video">
              <video id="myVideoTag" autoplay></video>
            <div class="small-video">
            <video id="theirVideoTag" autoplay></video>
            </div>
              </div></div></div></div></div>
            

    
<!--    chat message -->
  <div>
        <input type="file" id="sendFile"/><br>
        <progress id="fileProgress" value="1" max="100"></progress>
      <a id="receivedFileLink"></a>
      <hr>
    </div>
	<div>
				<label> Your Name</label><input id="myName" type="text"/>
				<label> Message </label> <input id="myMessage" type="text"/>
				<input id="sendMessage" type="submit"/>
				<div id="chatArea"> Message Output:<br></div>
                <div id="signalingArea">Signaling Messages:<br> </div>
		</div>
    
<!--    chat message --> 
		<script>
          
          var myVideoArea = document.querySelector("#myVideoTag");
          var theirVideoArea = document.querySelector("#theirVideoTag");
          
            // chat attributes start
            
	      var myName = document.querySelector("#myName");
		  var myMessage = document.querySelector("#myMessage");
		  var sendMessage = document.querySelector("#sendMessage");
		  var chatArea = document.querySelector("#chatArea");
		  var ROOM = "chat124";
          var SIGNAL_ROOM = "videochat124";
          var signalingArea = document.querySelector("#signalingArea");
            var sendFile = document.querySelector("input#sendFile");
            var fileProgress = document.querySelector("progress#fileProgress");
            var downloadLink = document.querySelector('a#receivedFileLink');
            var FILES_ROOM = "files";
		//chat 	attributes end
		//signal iceServer conncetion
            var configuration = {
                'iceServers': [{
                    'url': 'stun:stun.l.google.com:19302'
                }]
            };
            var rtcPeerConn;
        //=============
            var dataChannelOptions = {
                ordered: false, // no guarentee in delivery unreliable
                maxRetransmitTime: 1000, //milliseconds
            };    
            var dataChannel;
            var receivedFileName
            var receivedFileSize
            var fileBuffer = [];
            var fileSize = 0;
        
            //chat connect to server start
            io = io.connect();
            io.emit('ready',{"chat_room":ROOM, "signal_room": SIGNAL_ROOM,"files_room":FILES_ROOM });
            
            io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
            
            
            io.on('files',function(data){
               receivedFileName = data.filename;
                receivedFileSize = data.filesize;
                displaySignalMessage("websocket says file is on way"+ receivedFileName + "-("+receivedFileSize+")");
            });
            
            io.on('announce',function(data){
                displayMessage(data.message);
            });
            
            io.on('message',function(data){
                displayMessage(data.author + ":" + data.message);
            });
            
            io.on('signaling_message', function(data) {
				displaySignalMessage("Signal received: " + data.type);
                
                if(!rtcPeerConn)
                    startSignaling();
                
                	
				if (data.type != "user_here") {
					var message = JSON.parse(data.message);
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
							// if we received an offer, we need to answer
							if (rtcPeerConn.remoteDescription.type == 'offer') {
								rtcPeerConn.createAnswer(sendLocalDesc, logError);
							}
						}, logError);
					}
					else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}
				
            });

            function startSignaling(){
                displaySignalMessage("starting Signaling... ");
                
                rtcPeerConn = new webkitRTCPeerConnection(configuration,null);
                
                dataChannel = rtcPeerConn.createDataChannel('textMessages',dataChannelOptions);
                dataChannel.onopen = dataChannelStateChanged
                rtcPeerConn.ondatachannel = receiveDataChannel;
                
                
                // onicescandidate event handler
                rtcPeerConn.onicecandidate = function(evt){
                    if (evt.candidate)
                        io.emit('signal',{"type": "ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }),"room":SIGNAL_ROOM});
                    displaySignalMessage("completed that ice candidate...");
                    
                };
                
                  // let the "negotiationneeded" event trigger offer generation
                rtcPeerConn.onnegotiationneeded = function () {
                displaySignalMessage("on negotioation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);   
                
                }
                
                // to handle remote stream, showing in ewmote video element
                rtcPeerConn.onaddstream = function(evt){
                    displaySignalMessage("going to add their stream");
                    theirVideoArea.src = URL.createObjectURL(evt.stream);
                };
                
                //local stream properties
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
				navigator.getUserMedia({
					'audio': false,
					'video': {
                        mandatory:  {
                        minWidth:320,
                        maxWidth:320,
                        minHeight:180,
                        maxHeight:180
                    }
                    }
				}, function (stream) {
					displaySignalMessage("going to display my stream...");
					myVideoArea.src = URL.createObjectURL(stream);
					rtcPeerConn.addStream(stream);
				}, logError);
 
                        }
            
            function dataChannelStateChanged(){
                if(dataChannel.readyState === 'open'){
                    displaySignalMessage("Data Channel Open");
                    dataChannel.onmessage = receiveDataChannelMessage;
                }
            }
            
            function receiveDataChannel(event){
                    displaySignalMessage("Data Channel receive ");
                dataChannel = event.channel;
                    dataChannel.onmessage = receiveDataChannelMessage;
                }
              
            
            function receiveDataChannelMessage(event){
                displaySignalMessage("Incoming Message");
                displayMessage("From DataChannel: " + event.data); 
                
                
                /// process file upload 
                fileBuffer.push(event.data);
                fileSize  += event.data.byteLength;
                fileProgress.value = fileSize;
                
                if(fileSize === receivedFileSize){
                    var received = new window.Blob(fileBuffer);
                    fileBuffer=[];
                    
                    downloadLink.href = URL.createObjectURL(received);
                    downloadLink.download = receivedFileName;
                    downloadLink.appendChild(document.createTextNode(receivedFileName+ "("+fileSize+") bytes"));
                }
                
            
                
                
            }
            
     function sendLocalDesc(desc) {
				rtcPeerConn.setLocalDescription(desc, function () {
					displaySignalMessage("sending local description");
					io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
				}, logError);
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message);
			}
			
	
            
           sendMessage.addEventListener('click', function(ev){
				io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
               dataChannel.send(myName.value + "says :" + myMessage.value);
				ev.preventDefault();
			}, false);
            
            sendFile.addEventListener('change',function(ev){
                var file = sendFile.files[0];
                displaySignalMessage("sending file "+ file.name+ "("+ file.size +")..");
                io.emit('files',{"filename":file.name,"filesize":file.size,"room":FILES_ROOM}); 
                
                fileProgress.max = file.size;
				var chunkSize = 16384;
				var sliceFile = function(offset) {
					var reader = new window.FileReader();
					reader.onload = (function() {
						return function(e) {
							dataChannel.send(e.target.result);
							if (file.size > offset + e.target.result.byteLength) {
								window.setTimeout(sliceFile, 0, offset + chunkSize);
								}
							fileProgress.value = offset + e.target.result.byteLength;
						};
					})(file);
					var slice = file.slice(offset, offset + chunkSize);
					reader.readAsArrayBuffer(slice);
				};
				sliceFile(0);		
            
            },false);

            
            // Define chat swnd function  Display Message
            function displayMessage(message){
                chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
            }
                
            function displaySignalMessage(message){
                signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
            }
            
            
           
		</script>
        

</body>
</html>